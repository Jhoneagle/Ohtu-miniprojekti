plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.1'
}

apply plugin: 'java'
apply plugin: 'build-dashboard'
apply plugin: 'application'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.2"
    reportsDir = file("$buildDir/JacocoReports")
}

repositories {
    jcenter()
    mavenCentral()
}

task( browse, dependsOn: jar, type: JavaExec ) {
    main = 'ohtu.Main'
    classpath = sourceSets.main.runtimeClasspath
}

project.ext {
    cucumberVersion = '1.2.5'
    seleniumVersion = '2.52.0'
}

dependencies {
    compile 'com.google.guava:guava:20.0'
    testCompile 'junit:junit:4.12'
    compile group: 'com.sparkjava', name: 'spark-core', version: '2.5'
    compile 'org.slf4j:slf4j-simple:1.7.21'
    testCompile group: 'org.fluentlenium', name: 'fluentlenium-core', version: '0.10.3'
    testCompile group: 'org.fluentlenium', name: 'fluentlenium-assertj', version: '0.10.3'
    testCompile 'info.cukes:cucumber-java:' + cucumberVersion
    testCompile 'info.cukes:cucumber-junit:' + cucumberVersion
    compile group: 'org.seleniumhq.selenium', name: 'selenium-htmlunit-driver',version: seleniumVersion
    compile group: 'org.seleniumhq.selenium', name: 'selenium-api', version:seleniumVersion
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version:seleniumVersion
    compile group: 'org.xerial', name:'sqlite-jdbc', version:'3.8.11.2'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
    compile group: 'org.thymeleaf', name: 'thymeleaf-spring5', version: '3.0.11.RELEASE'
    compile group: 'com.sparkjava', name: 'spark-template-thymeleaf', version: '2.7.1'
    compile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.5.1'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
}

test {
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
		    'ohtu/data_access/Dao.class',
                    'ohtu/data_access/Database.class',
		    '**/*Main**'
	    ])
        })
    }
}

task stage {
    dependsOn build
}

task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from(configurations.compile)
}
stage.dependsOn(copyToLib)

mainClassName = 'ohtu.Main'
